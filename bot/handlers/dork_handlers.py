import asyncio
from datetime import datetime

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile, CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession

from bot.fsm import DorkSearchStates
from scrapers.duckduckgo_searcher import DuckDuckGoSearcher

router = Router()

DORK_TEMPLATES = [
    '(intitle:"–≤–∞–∫–∞–Ω—Å–∏–∏" OR intitle:"–∫–∞—Ä—å–µ—Ä–∞" OR intitle:"—Ä–∞–±–æ—Ç–∞ —É –Ω–∞—Å" OR intitle:"–æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏" OR intitle:"jobs" OR intitle:"careers" OR inurl:career OR inurl:vacancies OR inurl:jobs) "{keyword}" -site:hh.ru -site:rabota.by -site:dev.by -site:habr.com -site:linkedin.com',
    '("–≤–∞–∫–∞–Ω—Å–∏–∏" OR "–∫–∞—Ä—å–µ—Ä–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏" OR "—Ä–∞–±–æ—Ç–∞ —É –Ω–∞—Å" OR "–∏—â–µ–º –≤ –∫–æ–º–∞–Ω–¥—É") "{keyword}" -site:hh.ru -site:rabota.by -site:dev.by -site:habr.com -site:linkedin.com',
    '("–æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é" OR "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ" OR "–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É") "{keyword}" -site:hh.ru -site:rabota.by -site:dev.by -site:habr.com -site:linkedin.com',
    '(intitle:"–≤–∞–∫–∞–Ω—Å–∏—è" OR intitle:"–≤–∞–∫–∞–Ω—Å–∏–∏" OR inurl:"career" OR inurl:"vacancies") "{keyword}" -site:rabota.by -site:hh.ru -site:dev.by -site:habr.com -site:linkedin.com',
    '–≤–∞–∫–∞–Ω—Å–∏—è —Ä–∞–±–æ—Ç–∞ –∫–∞—Ä—å–µ—Ä–∞ career –∏—â–µ–º –≤ –∫–æ–º–∞–Ω–¥—É work with us {keyword}" -site:rabota.by -site:hh.ru -site:dev.by -site:habr.com -site:linkedin.com',
]


@router.callback_query(F.data == "dork_search")
async def start_dork_search(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DorkSearchStates.waiting_for_keyword)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫' –∏–ª–∏ '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä').\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç –ø–æ–∏—Å–∫ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –º–æ—â–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å–∞–π—Ç–∞—Ö –∫–æ–º–ø–∞–Ω–∏–π."
    )
    await callback.answer()


@router.message(DorkSearchStates.waiting_for_keyword)
async def execute_dork_search(
    message: Message, state: FSMContext, session: AsyncSession
):
    keyword = message.text.strip()
    await state.clear()

    status_message = await message.answer(
        f"‚è≥ –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: '{keyword}'..."
    )

    try:
        searcher = DuckDuckGoSearcher()
        all_results = []
        seen_links = set()
        total_dorks = len(DORK_TEMPLATES)

        for i, template in enumerate(DORK_TEMPLATES):
            await status_message.edit_text(
                f"‚è≥ –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫... ({i + 1}/{total_dorks})\n–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{keyword}'"
            )
            query_text = template.format(keyword=keyword)
            results = await searcher.search(query_text)

            if results:
                for item in results:
                    if item["link"] not in seen_links:
                        all_results.append(item)
                        seen_links.add(item["link"])

            if i < total_dorks - 1:
                await asyncio.sleep(2)

        if not all_results:
            await status_message.edit_text("üòï –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        md_content = f"# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {keyword}\n\n"
        for item in all_results:
            md_content += f"## [{item['title']}]({item['link']})\n"
            md_content += f"`{item['link']}`\n\n---\n\n"

        file_data = md_content.encode("utf-8")
        timestamp = datetime.now().strftime("%Y-%m-%d")
        input_file = BufferedInputFile(
            file_data, filename=f"dork_results_{keyword}_{timestamp}.md"
        )

        await message.bot.send_document(
            message.from_user.id,
            input_file,
            caption=f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É: ¬´{keyword}¬ª",
        )
        await status_message.delete()

    except Exception as e:
        await status_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
